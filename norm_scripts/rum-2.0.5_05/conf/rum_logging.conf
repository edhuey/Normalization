############################################################
# A simple root logger with a Log::Log4perl::Appender::File
# file appender in Perl.
############################################################

log4perl.rootLogger=INFO, logfile, error_logfile

log4j.PatternLayout.cspec.W = sub { Text::Wrap::wrap("", "", $_[1]) }
                                
log4perl.logger.RUM.UI = INFO, stdout, logfile, error_logfile

# An appender that prints just INFO-level and higher log messages to
# the screen, colored according to the severity.
log4perl.appender.stdout=Log::Log4perl::Appender::ScreenColoredLevels
log4perl.appender.stdout.layout=PatternLayout
log4perl.appender.stdout.layout.ConversionPattern=%m%n
log4perl.appender.stdout.stderr=0
log4perl.appender.stdout.Threshold=INFO

log4perl.appender.stdout.color.DEBUG=dark white
log4perl.appender.stdout.color.INFO=
log4perl.appender.stdout.color.WARN=red
log4perl.appender.stdout.color.ERROR=red
log4perl.appender.stdout.color.FATAL=bold red

#       attributes
#           BOLD, DARK, UNDERLINE, UNDERSCORE, BLINK

#       colors
#           BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE

#       background colors
#           ON_BLACK, ON_RED, ON_GREEN, ON_YELLOW, ON_BLUE, ON_MAGENTA,
#           ON_CYAN, ON_WHITE

log4perl.appender.logfile=Log::Log4perl::Appender::File
log4perl.appender.logfile.layout=Log::Log4perl::Layout::PatternLayout::Multiline
log4perl.appender.logfile.filename=sub { $RUM::Logging::LOG_FILE }
log4perl.appender.logfile.layout.ConversionPattern=%d	%H	%P	%p	%c	%m%n

log4perl.appender.error_logfile=Log::Log4perl::Appender::File
log4perl.appender.error_logfile.layout=Log::Log4perl::Layout::PatternLayout::Multiline
log4perl.appender.error_logfile.filename=sub { $RUM::Logging::ERROR_LOG_FILE }
log4perl.appender.error_logfile.layout.ConversionPattern=%d %-5p - %m%n
log4perl.appender.error_logfile.Threshold=WARN

# ScriptRunner just logs the start and stop of each script. This
# causes INFO level messages marking the start and end of each script
# to be sent to the log file.

# This causes INFO-level messages from the script itself to be printed
# to the screen. INFO-level messages in the scripts (not in low-level
# libraries) should be intended for user consumption.

log4perl.additivity.RUM.Script=0

log4perl.logger.RUM.Config=INFO
log4perl.logger.RUM.FileIterator=INFO

# RUM.Script needs to go to stdout or else fatal messages won't go to
# the screen
log4perl.logger.RUM.Death.=INFO, stdout, logfile, error_logfile

# Prevent die messages from being logged twice.
log4perl.additivity.RUM.Death=0


###############################################################################
#
# Rum Platform Logging
#
# RUM::Platform contains all the platform-specific code for running or
# submitting jobs and checking on their status. Normally you probably
# want info level messages from all packages under RUM::Platform to go
# to the log file.
#
# 
# If you are trying to debug issues with a platform, you may want to
# uncomment these lines to get more verbose logging.
#
# log4perl.logger.RUM.Platform=DEBUG, logfile
# log4perl.additivity.RUM.Platform=0
# log4perl.additivity.RUM.Platform.Cluster=0
# log4perl.additivity.RUM.Platform.SGE=0

